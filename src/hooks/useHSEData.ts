import { useEffect } from 'react';
import { HSEIncident, HSETraining, HSETrainingSession, HSEAttendance } from '@/types';
import { repositories } from '@/services/repositories';
import { useHSEIncidents } from './useHSEIncidents';
import { useHSETrainings } from './useHSETrainings';
import { useHSETrainingImporter } from './useHSETrainingImporter';

/**
 * Hook pour initialiser le syst√®me HSE complet avec les modules de formation r√©els
 * Utilise le syst√®me d'importation intelligent pour cr√©er un environnement complet
 */
export function useHSEData() {
  const { addIncident } = useHSEIncidents();
  const { needsImport, initializeCompleteHSESystem, getImportStats } = useHSETrainingImporter();

  const createSampleIncidents = async () => {
    const existingIncidents = await repositories.hseIncidents.getAll();
    if (existingIncidents.length > 0) return; // D√©j√† des donn√©es

    const sampleIncidents: Omit<HSEIncident, 'id' | 'createdAt' | 'updatedAt' | 'status'>[] = [
      {
        employeeId: '1',
        type: 'EPI manquant ou d√©faillant',
        severity: 'medium',
        description: 'Casque de s√©curit√© endommag√© lors de la maintenance. Remplac√© imm√©diatement.',
        location: 'Zone production',
        occurredAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),
        reportedBy: 'Christian ELLA',
        investigatedBy: 'Marie LAKIBI',
        correctiveActions: 'Casque remplac√©, v√©rification de tous les EPI de l\'√©quipe effectu√©e.'
      },
      {
        employeeId: '5',
        type: 'Quasi-accident',
        severity: 'low',
        description: 'Glissade √©vit√©e de justesse √† cause d\'une flaque d\'eau dans le couloir.',
        location: 'Bureau administratif',
        occurredAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        reportedBy: 'Christian ELLA',
      },
      {
        employeeId: '2',
        type: 'Incident environnemental',
        severity: 'high',
        description: 'Petite fuite d\'huile d√©tect√©e pr√®s de l\'entr√©e principal. Intervention imm√©diate des √©quipes.',
        location: 'Entr√©e site',
        occurredAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000),
        reportedBy: 'Sylvie KOUMBA',
        investigatedBy: 'Marie LAKIBI',
      }
    ];

    for (const incident of sampleIncidents) {
      await addIncident(incident);
    }
  };

  const initializeIntelligentTrainingSystem = async () => {
    // V√©rifier si le syst√®me de formation a besoin d'√™tre initialis√©
    if (needsImport()) {
      console.log('üöÄ Initialisation automatique du syst√®me de formation HSE...');
      try {
        await initializeCompleteHSESystem();
        console.log('‚úÖ Syst√®me de formation HSE initialis√© avec succ√®s');
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation du syst√®me de formation:', error);
      }
    } else {
      const stats = getImportStats();
      console.log(`‚ÑπÔ∏è Syst√®me de formation d√©j√† initialis√© (${stats?.modulesImported} modules, ${stats?.sessionsPlanned} sessions)`);
    }
  };

  const initializeHSEData = async () => {
    try {
      // 1. Cr√©er quelques incidents de d√©monstration
      await createSampleIncidents();
      
      // 2. Initialiser le syst√®me de formation intelligent
      await initializeIntelligentTrainingSystem();
      
      console.log('‚úÖ Donn√©es HSE compl√®tes initialis√©es');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation des donn√©es HSE:', error);
    }
  };

  // Exposer les fonctions pour utilisation externe (pas d'auto-initialisation ici)
  return {
    initializeHSEData,
    initializeIntelligentTrainingSystem,
    createSampleIncidents,
  };
}
