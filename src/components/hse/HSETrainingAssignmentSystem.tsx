import { useState, useEffect, useMemo } from 'react';
import { Settings, Users, BookOpen, Calendar, AlertTriangle, CheckCircle, Play, Pause } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { StatusBadge } from '@/components/ui/status-badge';
import { useAuth } from '@/contexts/AppContext';
import { Employee, HSETrainingModule, UserRole } from '@/types';
import { toast } from '@/hooks/use-toast';
import hseModulesData from '@/data/hse-training-modules.json';

interface HSETrainingAssignmentSystemProps {
  employees: Employee[];
  onAssignTraining?: (assignments: TrainingAssignment[]) => void;
  onUpdateRules?: (rules: AssignmentRule[]) => void;
}

interface AssignmentRule {
  id: string;
  name: string;
  description: string;
  trainingId: string;
  conditions: RuleCondition[];
  autoAssign: boolean;
  priority: 'low' | 'medium' | 'high';
  reminderDays: number;
  active: boolean;
  createdAt: Date;
}

interface RuleCondition {
  type: 'role' | 'service' | 'experience' | 'habilitation';
  operator: 'equals' | 'contains' | 'greater_than' | 'less_than';
  value: string | number;
}

interface TrainingAssignment {
  id: string;
  employeeId: string;
  trainingId: string;
  ruleId: string;
  assignedAt: Date;
  dueDate: Date;
  status: 'pending' | 'notified' | 'accepted' | 'completed' | 'rejected';
  priority: 'low' | 'medium' | 'high';
  autoGenerated: boolean;
}

// Règles par défaut basées sur les rôles et postes SOGARA
const DEFAULT_RULES: Omit<AssignmentRule, 'id' | 'createdAt'>[] = [
  {
    name: 'Induction obligatoire - Nouveaux employés',
    description: 'Formation d\'accueil obligatoire pour tous les nouveaux collaborateurs',
    trainingId: 'HSE-001',
    conditions: [
      { type: 'role', operator: 'equals', value: 'EMPLOYE' }
    ],
    autoAssign: true,
    priority: 'high',
    reminderDays: 7,
    active: true
  },
  {
    name: 'Formation H2S - Personnel Production',
    description: 'Formation critique H2S pour le personnel affecté à la production',
    trainingId: 'HSE-015',
    conditions: [
      { type: 'service', operator: 'equals', value: 'Production' }
    ],
    autoAssign: true,
    priority: 'high',
    reminderDays: 3,
    active: true
  },
  {
    name: 'Travail en hauteur - Maintenance',
    description: 'Formation spécialisée pour le personnel de maintenance',
    trainingId: 'HSE-005',
    conditions: [
      { type: 'service', operator: 'equals', value: 'Maintenance' }
    ],
    autoAssign: true,
    priority: 'medium',
    reminderDays: 14,
    active: true
  },
  {
    name: 'Espace confiné - Techniciens spécialisés',
    description: 'Formation pour le travail en espace confiné',
    trainingId: 'HSE-004',
    conditions: [
      { type: 'service', operator: 'equals', value: 'Production' },
      { type: 'role', operator: 'equals', value: 'EMPLOYE' }
    ],
    autoAssign: true,
    priority: 'high',
    reminderDays: 7,
    active: true
  },
  {
    name: 'Permis de travail - Superviseurs',
    description: 'Formation système de permis pour les superviseurs',
    trainingId: 'HSE-007',
    conditions: [
      { type: 'role', operator: 'equals', value: 'SUPERVISEUR' }
    ],
    autoAssign: true,
    priority: 'medium',
    reminderDays: 14,
    active: true
  },
  {
    name: 'SST - Personnel d\'encadrement',
    description: 'Formation Sauveteur Secouriste du Travail',
    trainingId: 'HSE-008',
    conditions: [
      { type: 'role', operator: 'equals', value: 'SUPERVISEUR' }
    ],
    autoAssign: false,
    priority: 'medium',
    reminderDays: 21,
    active: true
  }
];

export function HSETrainingAssignmentSystem({ 
  employees, 
  onAssignTraining, 
  onUpdateRules 
}: HSETrainingAssignmentSystemProps) {
  const { hasAnyRole } = useAuth();
  const [activeTab, setActiveTab] = useState('rules');
  const [rules, setRules] = useState<AssignmentRule[]>([]);
  const [assignments, setAssignments] = useState<TrainingAssignment[]>([]);
  const [selectedRule, setSelectedRule] = useState<AssignmentRule | null>(null);
  const [showRuleDialog, setShowRuleDialog] = useState(false);
  const [isRunning, setIsRunning] = useState(false);

  const canManageHSE = hasAnyRole(['ADMIN', 'HSE']);
  const trainingModules = hseModulesData.hseTrainingModules as HSETrainingModule[];

  // Initialiser les règles par défaut
  useEffect(() => {
    const defaultRules: AssignmentRule[] = DEFAULT_RULES.map((rule, index) => ({
      ...rule,
      id: `rule_${index + 1}`,
      createdAt: new Date()
    }));
    setRules(defaultRules);
  }, []);

  // Vérifier si un employé correspond aux conditions d'une règle
  const matchesRuleConditions = (employee: Employee, conditions: RuleCondition[]): boolean => {
    return conditions.every(condition => {
      switch (condition.type) {
        case 'role':
          return condition.operator === 'equals' 
            ? employee.roles.includes(condition.value as UserRole)
            : condition.operator === 'contains'
            ? employee.roles.some(role => role.includes(condition.value as string))
            : false;
        
        case 'service':
          return condition.operator === 'equals'
            ? employee.service === condition.value
            : condition.operator === 'contains'
            ? employee.service.includes(condition.value as string)
            : false;
        
        case 'habilitation':
          return condition.operator === 'contains'
            ? employee.habilitations.some(hab => hab.includes(condition.value as string))
            : false;
        
        default:
          return false;
      }
    });
  };

  // Générer les attributions automatiques
  const generateAssignments = () => {
    if (!canManageHSE) return;

    setIsRunning(true);
    const newAssignments: TrainingAssignment[] = [];
    
    rules.filter(rule => rule.active && rule.autoAssign).forEach(rule => {
      const eligibleEmployees = employees.filter(employee => 
        matchesRuleConditions(employee, rule.conditions)
      );
      
      eligibleEmployees.forEach(employee => {
        // Vérifier si l'attribution n'existe pas déjà
        const existingAssignment = assignments.find(a => 
          a.employeeId === employee.id && 
          a.trainingId === rule.trainingId &&
          a.status !== 'completed'
        );
        
        if (!existingAssignment) {
          const dueDate = new Date();
          dueDate.setDate(dueDate.getDate() + rule.reminderDays);
          
          const assignment: TrainingAssignment = {
            id: `assignment_${Date.now()}_${employee.id}_${rule.trainingId}`,
            employeeId: employee.id,
            trainingId: rule.trainingId,
            ruleId: rule.id,
            assignedAt: new Date(),
            dueDate,
            status: 'pending',
            priority: rule.priority,
            autoGenerated: true
          };
          
          newAssignments.push(assignment);
        }
      });
    });
    
    setAssignments(prev => [...prev, ...newAssignments]);
    onAssignTraining?.(newAssignments);
    
    setTimeout(() => {
      setIsRunning(false);
      toast({
        title: 'Attribution automatique terminée',
        description: `${newAssignments.length} nouvelle(s) attribution(s) générée(s).`
      });
    }, 2000);
  };

  // Statistiques des règles
  const ruleStats = useMemo(() => {
    const activeRules = rules.filter(r => r.active).length;
    const autoRules = rules.filter(r => r.active && r.autoAssign).length;
    const totalAssignments = assignments.length;
    const pendingAssignments = assignments.filter(a => a.status === 'pending').length;
    
    return { activeRules, autoRules, totalAssignments, pendingAssignments };
  }, [rules, assignments]);

  // Employés affectés par règle
  const getAffectedEmployees = (rule: AssignmentRule): Employee[] => {
    return employees.filter(employee => 
      matchesRuleConditions(employee, rule.conditions)
    );
  };

  const toggleRuleActive = (ruleId: string) => {
    setRules(prev => prev.map(rule => 
      rule.id === ruleId 
        ? { ...rule, active: !rule.active }
        : rule
    ));
  };

  const toggleRuleAutoAssign = (ruleId: string) => {
    setRules(prev => prev.map(rule => 
      rule.id === ruleId 
        ? { ...rule, autoAssign: !rule.autoAssign }
        : rule
    ));
  };

  const getPriorityColor = (priority: 'low' | 'medium' | 'high') => {
    switch (priority) {
      case 'high': return 'text-red-600 bg-red-50';
      case 'medium': return 'text-yellow-600 bg-yellow-50';
      case 'low': return 'text-green-600 bg-green-50';
    }
  };

  const getStatusVariant = (status: TrainingAssignment['status']): "info" | "warning" | "success" | "urgent" => {
    switch (status) {
      case 'completed': return 'success';
      case 'rejected': return 'urgent';
      case 'pending': return 'warning';
      default: return 'info';
    }
  };

  if (!canManageHSE) {
    return (
      <div className="text-center py-12">
        <Settings className="w-16 h-16 mx-auto mb-4 text-muted-foreground" />
        <h3 className="text-lg font-medium mb-2">Accès restreint</h3>
        <p className="text-muted-foreground">
          Seuls les responsables HSE peuvent configurer les attributions automatiques.
        </p>
      </div>
    );
  }

  return (
    <>
      <div className="space-y-6">
        {/* En-tête */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold">Système d'Attribution Automatique</h1>
            <p className="text-muted-foreground">
              Configuration des règles d'attribution des formations selon les postes
            </p>
          </div>
          <div className="flex gap-2">
            <Button 
              onClick={generateAssignments}
              disabled={isRunning}
              className="gap-2"
            >
              {isRunning ? (
                <>
                  <Pause className="w-4 h-4 animate-spin" />
                  Attribution en cours...
                </>
              ) : (
                <>
                  <Play className="w-4 h-4" />
                  Lancer l'attribution
                </>
              )}
            </Button>
          </div>
        </div>

        {/* Statistiques */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm flex items-center gap-2">
                <Settings className="w-4 h-4" />
                Règles actives
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{ruleStats.activeRules}</div>
              <p className="text-xs text-muted-foreground">sur {rules.length} total</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm flex items-center gap-2">
                <BookOpen className="w-4 h-4 text-blue-500" />
                Auto-attribution
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">{ruleStats.autoRules}</div>
              <p className="text-xs text-muted-foreground">règles automatiques</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm flex items-center gap-2">
                <Users className="w-4 h-4 text-green-500" />
                Attributions totales
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">{ruleStats.totalAssignments}</div>
              <p className="text-xs text-muted-foreground">générées</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm flex items-center gap-2">
                <AlertTriangle className="w-4 h-4 text-yellow-500" />
                En attente
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-yellow-600">{ruleStats.pendingAssignments}</div>
              <p className="text-xs text-muted-foreground">à traiter</p>
            </CardContent>
          </Card>
        </div>

        {/* Onglets */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="rules">Règles d'attribution</TabsTrigger>
            <TabsTrigger value="assignments">Attributions générées</TabsTrigger>
            <TabsTrigger value="matrix">Matrice de conformité</TabsTrigger>
          </TabsList>

          <TabsContent value="rules" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Configuration des règles</CardTitle>
                <p className="text-sm text-muted-foreground">
                  Définissez les conditions d'attribution automatique des formations
                </p>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {rules.map(rule => {
                    const affectedEmployees = getAffectedEmployees(rule);
                    const training = trainingModules.find(t => t.id === rule.trainingId);
                    
                    return (
                      <Card key={rule.id} className={`${rule.active ? 'border-green-200' : 'border-gray-200'}`}>
                        <CardContent className="p-4">
                          <div className="flex items-start justify-between mb-3">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <h4 className="font-medium">{rule.name}</h4>
                                <Badge className={getPriorityColor(rule.priority)}>
                                  {rule.priority}
                                </Badge>
                                {rule.autoAssign && (
                                  <Badge variant="secondary">Auto</Badge>
                                )}
                              </div>
                              <p className="text-sm text-muted-foreground mb-2">{rule.description}</p>
                              <p className="text-xs text-muted-foreground">
                                Formation: {training?.title} ({training?.code})
                              </p>
                            </div>
                            <div className="flex items-center gap-2">
                              <Switch
                                checked={rule.autoAssign}
                                onCheckedChange={() => toggleRuleAutoAssign(rule.id)}
                                disabled={!rule.active}
                              />
                              <Switch
                                checked={rule.active}
                                onCheckedChange={() => toggleRuleActive(rule.id)}
                              />
                            </div>
                          </div>
                          
                          <div className="flex items-center justify-between text-sm">
                            <div className="flex items-center gap-4">
                              <span className="text-muted-foreground">
                                {affectedEmployees.length} employé(s) concerné(s)
                              </span>
                              <span className="text-muted-foreground">
                                Rappel: {rule.reminderDays} jours
                              </span>
                            </div>
                            <Button 
                              size="sm" 
                              variant="outline"
                              onClick={() => {
                                setSelectedRule(rule);
                                setShowRuleDialog(true);
                              }}
                            >
                              Détails
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="assignments" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Attributions générées</CardTitle>
                <p className="text-sm text-muted-foreground">
                  Liste des formations attribuées automatiquement
                </p>
              </CardHeader>
              <CardContent>
                {assignments.length === 0 ? (
                  <div className="text-center py-12">
                    <Calendar className="w-12 h-12 mx-auto mb-4 text-muted-foreground" />
                    <h3 className="text-lg font-medium mb-2">Aucune attribution</h3>
                    <p className="text-muted-foreground">
                      Lancez l'attribution automatique pour générer les formations.
                    </p>
                  </div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Employé</TableHead>
                        <TableHead>Formation</TableHead>
                        <TableHead>Règle</TableHead>
                        <TableHead>Priorité</TableHead>
                        <TableHead>Échéance</TableHead>
                        <TableHead>Statut</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {assignments.map(assignment => {
                        const employee = employees.find(e => e.id === assignment.employeeId);
                        const training = trainingModules.find(t => t.id === assignment.trainingId);
                        const rule = rules.find(r => r.id === assignment.ruleId);
                        
                        return (
                          <TableRow key={assignment.id}>
                            <TableCell>
                              <div>
                                <p className="font-medium">
                                  {employee?.firstName} {employee?.lastName}
                                </p>
                                <p className="text-sm text-muted-foreground">
                                  {employee?.matricule} • {employee?.service}
                                </p>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div>
                                <p className="font-medium">{training?.title}</p>
                                <p className="text-sm text-muted-foreground">{training?.code}</p>
                              </div>
                            </TableCell>
                            <TableCell>
                              <p className="text-sm">{rule?.name}</p>
                            </TableCell>
                            <TableCell>
                              <Badge className={getPriorityColor(assignment.priority)}>
                                {assignment.priority}
                              </Badge>
                            </TableCell>
                            <TableCell>
                              <p className="text-sm">
                                {assignment.dueDate.toLocaleDateString('fr-FR')}
                              </p>
                            </TableCell>
                            <TableCell>
                              <StatusBadge 
                                status={assignment.status} 
                                variant={getStatusVariant(assignment.status)}
                              />
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="matrix" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>Matrice de conformité par poste</CardTitle>
                <p className="text-sm text-muted-foreground">
                  Vue d'ensemble des formations requises par service et rôle
                </p>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {[...new Set(employees.map(e => e.service))].map(service => {
                    const serviceEmployees = employees.filter(e => e.service === service);
                    const serviceRules = rules.filter(rule => 
                      rule.active && rule.conditions.some(c => 
                        c.type === 'service' && c.value === service
                      )
                    );
                    
                    return (
                      <div key={service}>
                        <h3 className="font-semibold mb-3">{service}</h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                          {serviceRules.map(rule => {
                            const training = trainingModules.find(t => t.id === rule.trainingId);
                            const eligibleCount = serviceEmployees.filter(emp => 
                              matchesRuleConditions(emp, rule.conditions)
                            ).length;
                            
                            return (
                              <Card key={rule.id} className="p-3">
                                <div className="flex items-center justify-between mb-2">
                                  <h4 className="font-medium text-sm">{training?.title}</h4>
                                  <Badge variant="outline" className="text-xs">
                                    {training?.code}
                                  </Badge>
                                </div>
                                <div className="flex items-center justify-between text-sm">
                                  <span className="text-muted-foreground">
                                    {eligibleCount} employé(s)
                                  </span>
                                  <Badge className={getPriorityColor(rule.priority)}>
                                    {rule.priority}
                                  </Badge>
                                </div>
                              </Card>
                            );
                          })}
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>

      {/* Dialog détails de règle */}
      <Dialog open={showRuleDialog} onOpenChange={setShowRuleDialog}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>Détails de la règle</DialogTitle>
          </DialogHeader>
          {selectedRule && (
            <div className="space-y-4">
              <div>
                <h3 className="font-semibold">{selectedRule.name}</h3>
                <p className="text-sm text-muted-foreground">{selectedRule.description}</p>
              </div>
              
              <div>
                <h4 className="font-medium mb-2">Conditions:</h4>
                <div className="space-y-2">
                  {selectedRule.conditions.map((condition, index) => (
                    <div key={index} className="flex items-center gap-2 text-sm">
                      <Badge variant="outline">{condition.type}</Badge>
                      <span>{condition.operator}</span>
                      <Badge>{condition.value}</Badge>
                    </div>
                  ))}
                </div>
              </div>
              
              <div>
                <h4 className="font-medium mb-2">Employés concernés:</h4>
                <div className="max-h-48 overflow-y-auto">
                  {getAffectedEmployees(selectedRule).map(employee => (
                    <div key={employee.id} className="flex items-center justify-between py-2 border-b">
                      <span className="text-sm">
                        {employee.firstName} {employee.lastName} ({employee.matricule})
                      </span>
                      <Badge variant="outline">{employee.service}</Badge>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>
    </>
  );
}
