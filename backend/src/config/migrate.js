require('dotenv').config();

const { sequelize, testConnection } = require('./database');
const logger = require('../utils/logger');

// Import de tous les mod√®les pour cr√©er les relations
const Employee = require('../models/Employee.model');

const migrate = async () => {
  try {
    logger.info('üîÑ D√©marrage de la migration de la base de donn√©es...');
    
    // Test de connexion
    await testConnection();
    
    // Synchronisation des mod√®les (cr√©ation/mise √† jour des tables)
    await sequelize.sync({ 
      force: process.env.NODE_ENV === 'development' && process.argv.includes('--force'),
      alter: process.env.NODE_ENV === 'development' && !process.argv.includes('--force')
    });
    
    logger.info('‚úÖ Migration termin√©e avec succ√®s');
    
    // Cr√©ation du compte administrateur par d√©faut si non existant
    await createDefaultAdmin();
    
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Erreur lors de la migration:', error);
    process.exit(1);
  }
};

const createDefaultAdmin = async () => {
  try {
    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await Employee.findOne({
      where: {
        roles: {
          [sequelize.Sequelize.Op.contains]: ['ADMIN']
        }
      }
    });
    
    if (existingAdmin) {
      logger.info('üë§ Compte administrateur existant trouv√©');
      return;
    }
    
    // Cr√©er le compte admin par d√©faut
    const defaultAdmin = await Employee.create({
      firstName: 'Admin',
      lastName: 'SOGARA',
      matricule: 'ADM000',
      service: 'Administration',
      roles: ['ADMIN'],
      email: 'admin@sogara.com',
      password: process.env.ADMIN_DEFAULT_PASSWORD || 'SogaraAdmin2024!',
      status: 'active',
      competences: ['Administration syst√®me', 'Gestion des utilisateurs'],
      habilitations: ['Acc√®s total', 'Configuration syst√®me']
    });
    
    logger.info(`‚úÖ Compte administrateur cr√©√©: ${defaultAdmin.matricule}`);
    logger.info(`üìß Email: ${defaultAdmin.email}`);
    logger.info(`üîí Mot de passe par d√©faut: ${process.env.ADMIN_DEFAULT_PASSWORD || 'SogaraAdmin2024!'}`);
    logger.warn('‚ö†Ô∏è  IMPORTANT: Changez le mot de passe par d√©faut apr√®s la premi√®re connexion!');
    
  } catch (error) {
    logger.error('‚ùå Erreur cr√©ation admin par d√©faut:', error);
    throw error;
  }
};

// Ex√©cuter la migration si le script est appel√© directement
if (require.main === module) {
  migrate();
}

module.exports = { migrate, createDefaultAdmin };
